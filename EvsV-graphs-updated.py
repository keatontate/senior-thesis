#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun  9 21:57:00 2022

@author: keaton
"""
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
import altair as alt
from scipy.optimize import curve_fit

# atoms in lattice
cI16_atoms = 8
fcc_atoms = 1
oc88_atoms = 88

### both these quantities need to be per ion ###

# in eV
free_energy_cI16 = np.array([-5.76071198, -14.94661054, -14.04178384, -14.96733993, -13.07569301, -14.31603415, -8.96118289, -9.96961478, -14.39283052, -14.83343311, -6.48775741, -1.33737545, -14.59339995, -11.24107315, -14.77548444, -14.98944339, -13.51464566, -2.33795984, -12.55685694, -13.99655481, -14.97164714, -14.88768743, -14.08100655, -4.15864719, -13.70682722, -11.94846513, -14.70888726, -3.27704609, -14.62741058, -14.24276185, -4.98569255, -14.80771303, -14.92034558, -11.60804287, -14.65309909, -14.53596819, -14.31928642, -9.48276124, -14.76049736, -14.95032561, -14.99084672, -13.30445515, -12.26422677, -14.98504946, -14.85022279, -8.40303394, -14.16334851, -13.88201050, -7.80624451, -14.43280399, -10.42372953, -14.46304864, -14.88161733, -14.52999381, -10.84704214, -14.70694693, -14.91991233, -7.16892974, -14.18606114, -14.98115802, -12.82677793])
free_energy_bcc = np.array([-1.90129703, -1.12543580, -1.71517398, -1.90170208, -1.61128549, -1.75037602, -1.66427206, -1.88734750, -1.89688569, -1.21307937, -1.74696577, -1.71855250, -1.84180302, -1.90480916, -1.69869647, -1.87202129, -1.80310966, -1.29323023, -1.57481236, -1.85272426, -1.77848058, -0.24304845, -1.51952618, -1.81798768, -1.53829113, -1.36706839, -1.90390034, -1.77699657, -1.86281918, -0.55074867, -1.82400976, -1.54812169, -1.80491664, -1.55693872, -1.79124242, -0.81137812, -1.85803247, -1.43305428, -0.40364647, -1.59759530, -1.84238997, -1.68137575, -1.88021044, -0.68659482, -1.49339194, -1.87108210, -1.90385723, -1.59316861, -1.88170442, -1.03015280, -1.76222951, -1.64221680, -1.83012194, -1.73127110, -1.89052865, -1.89816701, -0.92559428, -1.62920445, -1.68271815, -1.64686780, -1.89334344])
free_energy_fcc = np.array([-1.82218418, -1.02434174, -1.88344029, -1.85706577, -1.63926991, -1.90551502, -1.86660133, -0.91947316, -1.84103586, -1.67945519, -1.87051619, -1.88166698, -1.90053114, -1.54504356, -0.54434882, -1.42922659, -1.89602815, -0.80514342, -1.59443753, -0.39643262, -1.89051212, -1.48995755, -0.68047808, -1.90215523, -1.80036894, -1.28878564, -1.77541731, -1.89736854, -0.23560541, -1.90371114, -1.84624746, -1.36235381, -1.89030055, -1.85683752, -1.12044481, -1.74730799, -1.20839758, -1.90640338, -1.87549594, -1.71536917, -1.90512431])
free_energy_oc88 = np.array([-323.99678726, 76.03653867, -43.21161243, -13.45311139, -66.21759986, -49.17646483, -319.47807871, -69.34366403, -65.57716280, -0.63232304, -24.64216112, -56.90697954, 67.93108541, -406.69271917, -543.92191157, -64.32428289, -69.91573974, 13.59370482, 9.16771468, -52.57329215, -31.82446810, -68.66423870, 133.30040856, -38.58146008, -310.95772289, -67.33873947, 60.15504731, 126.08493651, -36.04827367, -62.42758162, 4.13386926, -55.55571820, -59.34896701, 52.67115547, -528.93714408, 14.46071083, -33.35763977, -61.47402082, -531.04424424, -2655.35509235, -54.17711831, 118.86613675, -60.45020365, -471.60656837, -258.43369455, 101.65317169, -140.63364421, 126.89907614, -50.92877473, -502.40869192, -27.47875458, -68.26602799, 20.07382677, -3179.33654111, 110.35510273, -451.79950775, -40.96677307, -5.14531147, -67.82708170, -9.38552557, -462.11468218, -58.16939974, 84.38860900, 38.68363826, -70.04708415, -63.30695183, -69.61953221, -2024.08725176, 25.95599073, 45.51844715, -45.32354028, 92.95461507, -17.26502011, -66.80327023, -401.91836284, -47.30941650, 32.16914757, -69.02671845, -64.88115057, -491.13505807, -20.86907310])

# in Angstroms**3
volume_cI16 = np.array([7.85, 22.03, 14.29, 21.54, 12.52, 15.04, 9.16, 9.72, 27.91, 17.46, 8.10, 6.67, 26.22, 10.60, 17.04, 20.58, 13.21, 6.90, 11.86, 30.90, 19.20, 23.03, 30.29, 7.36, 13.57, 11.22, 25.12, 7.13, 16.22, 29.08, 7.60, 24.06, 18.32, 10.90, 25.67, 15.82, 28.49, 9.43, 24.59, 18.76, 20.12, 12.86, 11.53, 19.66, 23.54, 8.88, 29.68, 13.93, 8.62, 15.43, 10.01, 27.34, 17.88, 26.77, 10.30, 16.63, 22.53, 8.36, 14.66, 21.06, 12.19])
# bcc is not accessible for the ground state of lithium. the structure is hR9 instead. See Guillame et. al.
# volume_bcc = np.array([19.11, 9.27, 34.21, 21.54, 39.65, 13.83, 36.86, 23.50, 18.53, 9.63, 32.51, 13.37, 27.02, 20.30, 35.08, 24.87, 14.80, 10.01, 41.58, 26.29, 14.31, 6.96, 44.60, 28.52, 43.58, 10.39, 19.70, 30.88, 25.57, 7.58, 15.30, 11.61, 29.29, 42.57, 30.08, 8.23, 16.33, 10.79, 7.27, 12.03, 15.81, 35.96, 24.18, 7.90, 11.19, 16.86, 20.92, 40.61, 17.41, 8.91, 31.69, 12.47, 27.76, 33.35, 17.96, 22.18, 8.56, 38.71, 12.91, 37.78, 22.84])
volume_fcc = np.array([15.16, 8.83, 23.97, 16.19, 12.36, 20.73, 25.35, 8.49, 15.67, 12.80, 16.71, 17.25, 21.99, 11.51, 7.51, 10.69, 22.63, 8.15, 11.93, 7.20, 17.80, 11.09, 7.83, 18.94, 14.67, 9.92, 14.19, 18.36, 6.90, 21.35, 26.78, 10.30, 23.29, 26.06, 9.19, 13.71, 9.55, 20.12, 24.65, 13.25, 19.52])
volume_oc88 = np.array([2.28, 4.78, 10.20, 7.70, 15.94, 11.04, 3.44, 18.66, 15.58, 7.04, 8.40, 12.54, 4.95, 2.18, 1.57, 14.87, 19.49, 3.31, 6.62, 11.62, 8.89, 17.86, 3.72, 9.66, 2.49, 16.69, 5.12, 3.58, 9.40, 14.17, 6.83, 12.23, 13.18, 5.29, 2.38, 6.42, 9.14, 13.84, 1.65, 2.82, 11.92, 4.00, 13.50, 1.81, 2.60, 4.30, 2.94, 3.86, 11.33, 1.73, 8.64, 17.46, 6.22, 2.71, 4.15, 1.90, 9.93, 7.26, 17.07, 7.48, 1.99, 12.86, 4.62, 5.65, 19.91, 14.52, 19.07, 3.06, 6.03, 5.47, 10.47, 4.46, 7.93, 16.31, 2.09, 10.75, 5.84, 18.25, 15.22, 3.19, 8.16])

# trim the parts of the oc88 data that diverged when using DFT
oc88_data = pd.DataFrame(np.transpose([free_energy_oc88,volume_oc88]),columns = ["Energy","Volume"])
oc88_data = oc88_data[oc88_data["Volume"] > 3.6]

#################################################

### fit the data to the Birch-Murnaghan equation of state ###

x_vols = np.linspace(1,40,1000)

# first, define the BM eqn...
def BirchM(V, E_0, V_0, B_0, B_1, H):
    return E_0 + ((9*V_0*B_0)/16) * (((V_0/(V+H))**(2.0/3.0) - 1)**3.0 * B_1 + ((V_0/(V+H))**(2.0/3.0) - 1)**2.0 * (6 - 4*(V_0/(V+H))**(2.0/3.0)))

# fit the function for each structure
popt_fcc, pcov_fcc = curve_fit(BirchM, volume_fcc, free_energy_fcc/fcc_atoms, p0=[-1.9,23.9,0.10,3.87,3.24], maxfev=100000)
popt_cI16, pcov_cI16 = curve_fit(BirchM, volume_cI16, free_energy_cI16/cI16_atoms, p0=[-1.9,23.9,0.10,3.87,3.24], maxfev=100000)
# popt_oc88, pcov_oc88 = curve_fit(BirchM, volume_oc88, free_energy_oc88/oc88_atoms, p0=[-1.9,23.9,0.10,3.87,3.24], maxfev=1000000)
popt_oc88, pcov_oc88 = curve_fit(BirchM, oc88_data['Volume'], oc88_data['Energy']/oc88_atoms, p0=[-1.9,23.9,0.10,3.87,3.24], maxfev=1000000000)

### Plotting section ###
fig, ax1 = plt.subplots(1,1)

# plot original data
ax1.scatter(volume_cI16, free_energy_cI16/cI16_atoms, color="b", label="cI16 structure", marker="v")
ax1.scatter(volume_fcc, free_energy_fcc/fcc_atoms, color="r", label="fcc structure", marker="^")
ax1.scatter(oc88_data['Volume'], oc88_data['Energy']/oc88_atoms, color="g", label="oC88 structure")

# plot fit curves
ax1.plot(x_vols, BirchM(x_vols, *popt_fcc), "r--", label="Birch-Murnaghan fit - fcc")
ax1.plot(x_vols, BirchM(x_vols, *popt_cI16), "b--", label="Birch-Murnaghan fit - cI16")
ax1.plot(x_vols, BirchM(x_vols, *popt_oc88), "g--", label="Birch-Murnaghan fit - oC88")

# limits and labels
ax1.set_xlim(0,35)
ax1.set_ylim(-2,2)

ax1.set_xlabel("Volume (Angstroms^3)")
ax1.set_ylabel("Energy (eV)")
ax1.set_title("Lithium Simulation Results")
ax1.legend()

fig.show()
fig.savefig("./test.png", dpi='figure')


